=== 群组 ===

对于复杂的表单，我们需要将表单元素进行分组。例如一个用户注册表单中，帐户和密码放置在一个组，而用户个人信息放置在一个组。对于这种需求，我们可以使用 QForm 提供的群组来实现。


## 添加群组 ##

添加群组的方法和添加值元素类似：

/---code php
// 添加一个 ID 为 userinfo 的群组，该群组包含两个值元素
$form->add(QForm::GROUP, 'userinfo', array(
    array(QForm::ELEMENT, 'username'),
    array(QForm::ELEMENT, 'password')
));
\---

添加群组及元素的连贯接口用法：

/---code php
$form->add(QForm::GROUP, 'userinfo')
         ->add(QForm::ELEMENT, 'username')
         ->add(QForm::ELEMENT, 'password');
\---

> 在添加群组后连贯使用 add() 方法添加的元素，将属于该群组。

群组除了可以容纳多个元素，还可以容纳群组。也就是说群组是可以嵌套的。不过大多数情况下，超过一层的群组意义不大。


## 在配置文件中添加群组 ##

在配置文件中，默认所有元素都是值元素，如果要添加群组，则通过 "_elements" 属性中指定该群组的元素，例如：

/---code yaml
userinfo:
  _elements:
    username:
      _ui: "textbox"
      maxlength: 15
    #
    password:
      _ui: "password"
      maxlength: 30

profile:
  _elements:
    address:
      _ui: "textbox"
      maxlength: 80
    #
    postcode:
      _ui: "textbox"
      maxlength: 6
\---


## 访问群组和群组中的元素 ##

要访问一个群组中的表单元素，仍然使用 element() 方法：

/---code php
// 访问表单 userinfo 群组中的 username 元素
$form->element('userinfo')
         ->element('username')
         ->set('_ui', 'textbox');
\---

或者使用简写形式：

/---code php
$form->element('userinfo/username')
     ->set('_ui', 'textbox');
\---

> 技巧：element() 方法使用“/”符号来表示群组与元素之间的父子关系。由于群组是可以嵌套的，所以可以使用“group1/group1_1/element”的形式直接访问深层元素。

同样，也可以用数组形式来访问群组的元素：

/---code php
echo $form['userinfo']['username']->value;
\---

以及更深层次群组的元素：

/---code php
echo $form['group1']['group1_1']['element']->value;
\---


## 删除表单元素 ##

表单对象的 remove() 方法也支持用“/”表示父子关系的方式：

/---code php
// 删除 userinfo 群组中的 username 元素
$form->remove('userinfo/username');

// 删除整个 profile 群组
$form->remove('profile');
\---

使用 unset() 函数删除元素或群组：

/---code php
// 删除 profile 群组中的 address 元素
unset($form['profile']['address']);

// 删除整个 profile 群组
unset($form['profile']);
\---

在删除一个群组时，该群组的所有元素和子群组都会被删除。


## 提交结果 ##

假设一个表单具有 userinfo 和 profile 两个群组，两个群组中分别有下列元素：

/---code ini
userinfo:
  username
  password

profile:
  address
  postcode
\---

那么默认情况下通过该表单提交的 POST 数据会是：

/---code php
$_POST = array(
    'userinfo' => array(
        'username' => '....',
        'password' => '....',
    ),
    'profile' => array(
        'address'  => '....',
        'postcode' => '....',
    ),
)
\---

可以看出，群组名自动变成了数组的键名，而该组中每个元素的值都在一个子数组中。


## 群组与值 ##

根据前面的规则，既然提交后的结果是一个嵌套数组，那么将数据导入表单时，提供的数据也应该是一个嵌套数组：

/---code php
$arr = array(
    'userinfo' => array(
        'username' => 'dualface',
        'password' => '123456',
    ),
    'profile'  => array(
        'address'  => 'ZiGong SiChuan',
        'postcode' => '643000',
    ),
);

$form->import($arr);

// 将输出 dualface
echo $form['userinfo']['username']->value;

// 将输出 643000
echo $form['profile']['postcode']->value;
\---

但是有时我们希望能够控制部分元素的值不使用嵌套数组。例如用户注册时，用户名和密码不存入嵌套数组，而用户的地址、邮编等则存入 profile 子数组。

为了实现这种效果，我们可以将群组的 _nested_name 属性指定为空字符串（该属性默认值为群组的名字）：

/---code php
$form['userinfo']->_nested_name = '';
\---

通过配置文件指定：

/---code yaml
userinfo:
  _nested_name: ""
  ....
\---

经过上面的修改，提交后的数据将变成：

/---code php
$_POST = array(
    'username' => '....',
    'password' => '....',

    'profile' => array(
        'address'  => '....',
        'postcode' => '....',
    ),
)
\---

这样一来，我们可以利用 ActiveRecord 的“嵌套赋值”特征，一次性为模型及关联模型赋值：

/---code php
function actionSave()
{
    $form = new Form_UserRegister();

    if ($this->_context->isPOST() && $form->validate($_POST))
    {
        // 一次性填充 User 对象及关联的 Profile 对象的属性值
        $user = new User($form->values());
        ....
    }

    ....
}
\---

上述代码执行 new User($form->values()) 后，$user 对象的属性值会根据表单值自动填充，而 $user->profile 关联对象的属性值也会自动填充。


## 指定元素或群组的嵌套存 ##

除了控制群组中元素的值是否存入嵌套数组，我们还可以控制嵌套数组的名字：

/---code php
$form['profile']->changeNestedName('group_profile');
\---

设置后提交数据将变成：

/---code php
$_POST = array(
    'username' => '....',
    'password' => '....',

    'group_profile' => array(
        'address'  => '....',
        'postcode' => '....',
    ),
)
\---

<p>&nbsp;</p>

如果只是希望群组中个别元素的值不保存到嵌套数组中，或保存到其他嵌套数组，只需要简单的指定 _nested_name 为空或其他群组名即可。

/---code php
// 将 userinfo 群组中 email 元素的值保存到 profile 群组
$form['userinfo']['email']->_nested_name = 'profile';
\---

利用这些特性，我们可以充分的控制表单，以及表单值。


<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

$Id: form-grouping.texy 2295 2009-03-10 07:48:18Z dualface $

