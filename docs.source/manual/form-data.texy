=== 用表单处理提交数据 ===

当用户通过浏览器提交数据后，我们可以使用 QForm 来对提交数据进行过滤和验证。


## 定义表单过滤器 ##

在表单对象中，每一个元素可以保存一个或多个值。因此为表单元素指定过滤器，可以让表单对象在处理数据时自动完成对输入数据的过滤。

/---code yaml
username:
  # 用 _filters 指定元素的过滤器
  _filters: "trim, strtolower"
\---

每一个过滤器的名字要么是一个全局函数，要么是一个类的静态方法。例如：

/---code yaml
username:
  _filters: "my_filter_func, MyClass::myFilterMethod"
\---

全局函数可以是 PHP 内置的函数，也可以是开发者自己编写的函数。

除了通过配置文件指定过滤器，还可以使用编码方式指定表单元素的过滤器。

/---code php
$form->add(QForm::ELEMENT, 'username')
     ->addFilters('trim, strtolower');
\---

如果是需要附加参数的过滤器 ，则必须采用下面的格式：

/---code php
$element->addFilters(array(
    array('substr', 0, 5),
    'strtolower',
));
\---


## 定义表单验证规则 ##

过滤器可以将输入数据进行格式化，而验证则用来保证数据符合预期的要求。

/---code yaml
username:
  # 用 _validations 指定验证规则
  _validations:
    - "is_alnum", "用户名只能使用26个字母和数字"
    - "min_length", 5, "用户名至少需要5个字符"
    - "max_length", 15, "用户名不能超过15个字符"
\---

上述每一条验证规则第一部分都是用于验证的方法，可以是 QValidator 类的验证方法，或者全局函数和类静态方法。

例如：

/---code yaml
username:
  _validations:
    - "is_int", "使用 PHP 内置函数进行验证"
    - "my_validate_func", "附加参数", "自定义验证函数"
    - "MyClass::validateMethod", "附加参数1", "附加参数2", "用于验证的类静态方法"
\---

验证规则的第二部分则是需要传递给验证方法的附加参数，例如 min_length 这个验证方法要求指定值的最短长度。附加参数的个数是不定的，最后一个参数则总是验证失败时要显示的错误信息。

使用连贯接口为元素添加验证规则：

/---code php
$form->add(QForm::ELEMENT, 'username')
     ->addValidations('is_alnum', '用户名只能使用26个字母和数字')
     ->addValidations('min_length', 5, '用户名至少需要5个字符');
\---

批量添加验证规则：

/---code php
$form->add(QForm::ELEMENT, 'password')
     ->addValidations(array(
         array('min_length', 6, '密码至少需要5个字符'),
         array('max_length', 30, '密码最多30个字符'),
     ));
\---


## 用表单对象处理输入数据 ##

设置好表单的过滤器和验证规则后，就可以将数据导入表单对象并进行处理了。

将数据导入表单对象，并进行过滤和验证：

/---code php
$form->validate($_POST);
\---

validate() 方法完成三项工作：

1.  将数据导入表单对象
2.  对数据进行过滤和验证
3.  如果所有数据验证都通过，返回 true，否则返回 false

表单处理过程示例：

/---code php
class Controller_Posts extends Controller_Abstract
{
    function actionCreate()
    {
        $form = new PostForm();

        // 判断当前请求是否是 POST 请求
        if ($this->_context->isPOST())
        {
            if ($form->validate($_POST))
            {
                // 验证通过，创建一个新的 Post 对象并保存
                $post = new Post($form->values());
                $post->save();

                // 重定向浏览器
                return $this->_redirect(url('posts/show', array('id' => $post->id()));
            }
        }

        $this->_view['form'] = $form;
    }
}
\---

在上面的代码中，在验证失败时并没有进行处理，而是将错误显示等工作交给视图完成。


## 在视图中显示表单验证错误信息 ##

视图中可以通过 isValid() 确认元素值是否验证通过，并用 errorMsg() 获得该元素所有的验证错误信息。

/---code php
<?php echo Q::control($element->_ui, $id, $element->attribs()); ?>

<?php if (!$element->isValid()): ?>
<span class="error">
  <?php echo nl2br(h(implode("\n", $element->errorMsg()))); ?>
</span>
<?php endif; ?>
\---


## 配合模型使用表单 ##

大多数情况下，我们将输入数据导入表单，过滤和验证后再通过模型保存到数据库中。

由于模型可以定义验证规则，所以本着 DRY 原则，我们不应该在表单中把验证规则再定义一次。

/---code php
class PostForm extends QForm
{
    function __construct($id = null, $action = null, $method = null)
    {
        parent::__construct($id, $action, $method);
        $this->add(QForm::ELEMENT, 'title');
                 ->addFilter('trim')
                 // 将 Post 模型的验证规则指定给 title 元素
                 ->addValidations(Post::meta());
    }
}
\---

从模型批量设置验证规则：

/---code php
// 调用 QForm 对象的 addValidation() 方法
$form->addValidation(Post::meta());
\---

上述代码会将模型所有属性的验证规则指定给表单中的同名元素。

有必要时，可以进一步指定只导入哪些属性的验证规则：

/---code php
// 仅有 title 和 body 属性的验证规则会被导入表单的同名元素
$form->addValidations(Post::meta(), 'title, body');
\---


## 将表单数据传递给模型 ##

表单的数据通过验证后，需要传递给模型，才能最终保存到数据库：

/---code php
$post = new Post($form->values());
\---

表单对象的 values() 方法用来提取已经过滤和验证过的表单数据，因此可以放心的存入模型中。


<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

$Id: form-data.texy 2295 2009-03-10 07:48:18Z dualface $

